{"version":3,"sources":["App.module.scss","components/Main/Tasks/Tasks.module.scss","components/Main/Main.module.scss","theme.ts","store/reducer.ts","store/store.ts","store/constants.ts","components/Main/Add/Add.tsx","components/Main/Tasks/Task/TaskStyles.ts","components/Main/Tasks/Task/TaskInput/TaskInput.tsx","components/Main/Tasks/Task/Task.tsx","components/Main/Tasks/Tasks.tsx","components/Main/Tasks/TasksContainer.tsx","components/Main/Main.tsx","components/Main/MainContainer.tsx","api/localStorageAPI.ts","store/actions.ts","App.tsx","index.tsx","components/Main/Tasks/Task/TaskInput/TaskInput.module.scss","components/Main/Add/Add.module.scss"],"names":["module","exports","theme","createMuiTheme","palette","primary","main","indigo","secondary","green","A700","typography","body1","fontSize","props","MuiButton","size","overrides","initialState","tasks","inputValue","rootReducer","combineReducers","toDo","state","action","type","newText","id","text","isPerformed","filter","i","map","store","createStore","Add","setInputText","addTask","Box","className","styles","rootBox","textFieldBox","mr","TextField","label","fullWidth","value","onChange","e","target","Button","btn","variant","color","onClick","useTaskStyles","makeStyles","createStyles","root","textDecoration","TaskInput","inputTaskText","handleInputBaseChange","saveTask","item","handleIconButtonClick","Paper","component","paper","InputBase","inputBase","placeholder","autoFocus","Tooltip","title","placement","IconButton","iconButton","Divider","divider","orientation","flexItem","Task","deleteTasks","setPerformed","handleListItemClick","selectedIndex","editModeIndex","decoration","classes","useState","setInputTaskText","ListItem","key","button","selected","ListItemIcon","Checkbox","edge","checked","ListItemText","ListItemSecondaryAction","Tasks","listBox","List","TasksContainer","setSelectedIndex","setEditModeIndex","useEffect","index","Main","elevation","MainContainer","dispatch","useDispatch","useSelector","shallowEqual","tasksLocalStorage","JSON","parse","localStorage","getItem","setTasksActionCreator","setItem","stringify","setToLocalStorage","setInputTextActionCreator","k","newId","Math","floor","random","length","addTaskActionCreator","deleteTaskActionCreator","setPerformedActionCreator","saveTaskActionCreator","App","ThemeProvider","app","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.ffee9f19.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2315q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listBox\":\"Tasks_listBox__XEVD_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"Main_paper__48Cap\"};","import {createMuiTheme} from \"@material-ui/core/styles\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: indigo[\"400\"],\r\n        },\r\n        secondary: {\r\n            main: green.A700,\r\n        },\r\n    },\r\n    typography: {\r\n        body1: {\r\n            fontSize: 14,\r\n            '@media (min-width:600px)': {\r\n                fontSize: 18,\r\n            }\r\n        }\r\n    },\r\n    props: { //Плотность Button\r\n        MuiButton: {\r\n            size: 'large',\r\n        }\r\n    },\r\n    overrides: { //Переопределить плотность Button\r\n        MuiButton: {\r\n            // sizeLarge: {\r\n            //     padding: 5,\r\n            // },\r\n        },\r\n    },\r\n});\r\n\r\n","import {ADD_TASK, DELETE_TASK, SAVE_TASK, SET_INPUT_TEXT, SET_PERFORMED, SET_TASKS} from \"./constants\";\r\nimport {IState} from './types'\r\nimport {ActionType} from \"./actions\";\r\n\r\n/*{id: 1, text: 'Text1', isPerformed: false},\r\n{id: 2, text: 'Text2', isPerformed: false},\r\n{id: 3, text: 'Text3', isPerformed: true},\r\n{id: 4, text: 'Text4', isPerformed: false}*/\r\n\r\nconst initialState: IState = {\r\n    tasks: [],\r\n    inputValue: '',\r\n};\r\n\r\nexport const reducer = (state = initialState, action: ActionType): IState => {\r\n    switch (action.type) {\r\n        case SET_INPUT_TEXT: {\r\n            return {...state, inputValue: action.newText}\r\n        }\r\n        case ADD_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, {id: action.id, text: action.text, isPerformed: false}],\r\n                inputValue: ''\r\n            }\r\n        }\r\n        case DELETE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(i => i.id !== action.id)\r\n            }\r\n        }\r\n        case SET_PERFORMED: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(i => {\r\n                    if (i.id === action.id) {\r\n                        return {...i, isPerformed: !i.isPerformed}\r\n                    } else {\r\n                        return {...i}\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case SAVE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(i =>\r\n                    i.id === action.id\r\n                        ? {...i, text: action.text}\r\n                        : {...i}\r\n                )\r\n            }\r\n        }\r\n        case SET_TASKS: {\r\n            return {\r\n                ...state, tasks: action.tasks\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n};","import {createStore, combineReducers} from 'redux';\r\nimport {reducer} from \"./reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    toDo: reducer\r\n});\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer> //ReturnType cоздаёт тип, состоящий из возвращаемого типа функции RootReducer\r\n\r\nexport const store = createStore(rootReducer);","export const ADD_TASK = 'ADD_TASK';\r\nexport const SET_INPUT_TEXT = 'SET_INPUT_TEXT';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const SET_PERFORMED = 'SET_PERFORMED';\r\nexport const SAVE_TASK = 'SAVE_TASK';\r\nexport const SET_TASKS = 'SET_TASKS';\r\n","import React, {FC} from 'react';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport styles from './Add.module.scss'\r\nimport {IAddPropsType} from \"./AddTypes\";\r\n\r\nexport const Add: FC<IAddPropsType> = ({setInputText, inputValue, addTask}) => {\r\n    return (\r\n        <Box className={styles.rootBox}>\r\n            <Box className={styles.textFieldBox} mr={2}>\r\n                <TextField\r\n                    label=\"Enter task text\"\r\n                    fullWidth\r\n                    value={inputValue}\r\n                    onChange={e => setInputText(e.target.value)}\r\n                />\r\n            </Box>\r\n            <Box>\r\n                <Button\r\n                    className={styles.btn}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => { addTask(inputValue) }}\r\n                >Add\r\n                </Button>\r\n            </Box>\r\n        </Box>\r\n    )\r\n};","import makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {createStyles} from \"@material-ui/styles\";\r\n\r\ntype TProps = {\r\n    textDecoration: string;\r\n};\r\n\r\nexport const useTaskStyles = makeStyles(() => createStyles({\r\n    root: (props: TProps) => ({textDecoration: props.textDecoration})\r\n}));","import React, {FC} from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Box} from \"@material-ui/core\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport styles from './TaskInput.module.scss'\r\nimport {ITaskInputProps} from \"./TaskInputTypes\";\r\n\r\nexport const TaskInput: FC<ITaskInputProps> = ({inputTaskText, handleInputBaseChange, saveTask,\r\n                                                   item, handleIconButtonClick}) => {\r\n\r\n    return (\r\n        <Box className={styles.rootBox} >\r\n            <Paper component=\"form\" className={styles.paper}>\r\n                <InputBase\r\n                    className={styles.inputBase}\r\n                    placeholder=\"Сhange the task text\"\r\n                    onChange={e => {handleInputBaseChange(e.target.value)}}\r\n                    value={inputTaskText}\r\n                    autoFocus\r\n                />\r\n                <Tooltip title=\"Save\" placement=\"top\">\r\n                    <IconButton className={styles.iconButton} onClick={() => {saveTask(item.id, inputTaskText)}}>\r\n                        <SaveIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Divider className={styles.divider} orientation=\"vertical\" flexItem />\r\n                <Tooltip title=\"Cancel\" placement=\"top\">\r\n                    <IconButton className={styles.iconButton} onClick={() => {handleIconButtonClick(null)}}>\r\n                        <CancelIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </Paper>\r\n        </Box>\r\n    );\r\n};","import React, {FC, useState} from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {Box} from \"@material-ui/core\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {useTaskStyles} from \"./TaskStyles\";\r\nimport {TaskInput} from \"./TaskInput/TaskInput\";\r\nimport {IHandleInputBaseChange, ITaskProps} from \"./TaskTypes\";\r\n\r\nexport const Task: FC<ITaskProps> = ({item, deleteTasks, setPerformed, handleListItemClick, selectedIndex,\r\n                                          saveTask, handleIconButtonClick, editModeIndex}) => {\r\n\r\n    let decoration = item.isPerformed ? {textDecoration: 'line-through'} : {textDecoration: 'none'};\r\n    const classes = useTaskStyles(decoration);\r\n\r\n    const [inputTaskText, setInputTaskText] = useState(item.text);\r\n    const handleInputBaseChange: IHandleInputBaseChange = value => {\r\n        setInputTaskText(value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editModeIndex === item.id ?\r\n                <TaskInput\r\n                    inputTaskText={inputTaskText}\r\n                    handleInputBaseChange={handleInputBaseChange}\r\n                    saveTask={saveTask}\r\n                    item={item}\r\n                    handleIconButtonClick={handleIconButtonClick}\r\n                /> :\r\n                <Box>\r\n                    <ListItem\r\n                        key={item.id}\r\n                        button\r\n                        onClick={() => handleListItemClick(item.id)}\r\n                        selected={selectedIndex === item.id}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <Checkbox\r\n                                edge=\"start\"\r\n                                color=\"primary\"\r\n                                checked={item.isPerformed}\r\n                                onClick={() => {setPerformed(item.id)}}\r\n                            />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={item.text} className={classes.root}/>\r\n                        {selectedIndex === item.id &&\r\n                            <ListItemSecondaryAction>\r\n                                <Tooltip title=\"Edit\" placement=\"top\">\r\n                                    <IconButton edge=\"end\" onClick={() => {handleIconButtonClick(item.id)}}>\r\n                                        <EditIcon/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title=\"Delete\" placement=\"top\">\r\n                                    <IconButton edge=\"end\" onClick={() => {deleteTasks(item.id)}}>\r\n                                        <DeleteIcon/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </ListItemSecondaryAction>\r\n                        }\r\n                    </ListItem>\r\n                </Box>\r\n            }\r\n        </>\r\n    );\r\n};","import React, {FC} from 'react';\r\nimport styles from './Tasks.module.scss'\r\nimport {Box} from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {ITasksProps} from \"./TasksTypes\";\r\n\r\nexport const Tasks: FC<ITasksProps> = ({tasks, deleteTasks, setPerformed, saveTask, selectedIndex,\r\n                                           handleListItemClick, editModeIndex, handleIconButtonClick}) => {\r\n\r\n    return (\r\n        <Box className={styles.listBox}>\r\n            <List>\r\n                {tasks.map(item =>\r\n                    <Task\r\n                        item={item}\r\n                        key={item.id}\r\n                        deleteTasks={deleteTasks}\r\n                        setPerformed={setPerformed}\r\n                        handleListItemClick={handleListItemClick}\r\n                        selectedIndex={selectedIndex}\r\n                        saveTask={saveTask}\r\n                        handleIconButtonClick={handleIconButtonClick}\r\n                        editModeIndex={editModeIndex}\r\n                    />\r\n                )}\r\n            </List>\r\n            {/*<img src={process.env.PUBLIC_URL + '/images/list.png'} alt='image'/>*/}\r\n        </Box>\r\n    );\r\n};","import React, {FC, useEffect} from 'react';\r\nimport {useState} from \"react\";\r\nimport {Tasks} from \"./Tasks\";\r\nimport {IHandleIconButtonClick, IHandleListItemClick, ITasksContainerProps} from \"./TasksTypes\";\r\n\r\nexport const TasksContainer: FC<ITasksContainerProps> = ({tasks, deleteTasks, setPerformed, saveTask}) => {\r\n\r\n    const [selectedIndex, setSelectedIndex] = useState<number | null>(null);\r\n    const handleListItemClick: IHandleListItemClick = index => {\r\n        setSelectedIndex(index);\r\n    };\r\n\r\n    const [editModeIndex, setEditModeIndex] = useState<number | null>(null);\r\n    const handleIconButtonClick: IHandleIconButtonClick = id => {\r\n        setEditModeIndex(id)\r\n    };\r\n\r\n    useEffect(() => {\r\n        setEditModeIndex(null);\r\n    },[tasks]);\r\n\r\n\r\n    return <Tasks\r\n        tasks={tasks}\r\n        deleteTasks={deleteTasks}\r\n        setPerformed={setPerformed}\r\n        saveTask={saveTask}\r\n        selectedIndex={selectedIndex}\r\n        handleListItemClick={handleListItemClick}\r\n        editModeIndex={editModeIndex}\r\n        handleIconButtonClick={handleIconButtonClick}\r\n    />\r\n};","import React from 'react';\r\nimport {Add} from \"./Add/Add\";\r\nimport {TasksContainer} from \"./Tasks/TasksContainer\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport styles from './Main.module.scss';\r\nimport {MainPropsType} from \"./MainTypes\";\r\n\r\nexport const Main: React.FC<MainPropsType> = (\r\n    {setInputText, inputValue, addTask, tasks, deleteTasks, setPerformed, saveTask}) => {\r\n\r\n    return (\r\n        <Paper className={styles.paper} elevation={3}>\r\n            <Add setInputText={setInputText} inputValue={inputValue} addTask={addTask} />\r\n            <TasksContainer\r\n                tasks={tasks}\r\n                deleteTasks={deleteTasks}\r\n                setPerformed={setPerformed}\r\n                saveTask={saveTask}\r\n            />\r\n        </Paper>\r\n    )\r\n};","import React, {useEffect} from 'react';\r\nimport {Main} from \"./Main\";\r\nimport {shallowEqual, useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    addTaskActionCreator,\r\n    deleteTaskActionCreator,\r\n    saveTaskActionCreator,\r\n    setInputTextActionCreator,\r\n    setPerformedActionCreator, setTasksActionCreator\r\n} from \"../../store/actions\";\r\nimport {RootStateType} from \"../../store/store\";\r\nimport {getFromLocalStorage, setToLocalStorage} from \"../../api/localStorageAPI\";\r\n\r\nexport const MainContainer = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {tasks, inputValue} = useSelector((state: RootStateType) => state.toDo, shallowEqual);\r\n\r\n    useEffect(() => {\r\n        const tasksLocalStorage = getFromLocalStorage();\r\n        if (tasksLocalStorage !== null) dispatch(setTasksActionCreator(tasksLocalStorage));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        setToLocalStorage(tasks);\r\n    }, [tasks]);\r\n    \r\n    const setInputText = (newText: string) => {\r\n        dispatch(setInputTextActionCreator(newText));\r\n    };\r\n\r\n    const addTask = (text: string) => {\r\n        if (text !== '') {\r\n            let k, newId;\r\n            do {\r\n                k = 0;\r\n                newId = Math.floor(Math.random() * Math.floor(tasks.length + 1));\r\n                for (let i = 0; i < tasks.length; i++) {\r\n                    if (tasks[i].id === newId) k++\r\n                }\r\n            } while (k !== 0);\r\n            dispatch(addTaskActionCreator(newId, text))\r\n        }\r\n    };\r\n\r\n    const deleteTasks = (id: number) => {\r\n        dispatch(deleteTaskActionCreator(id));\r\n    };\r\n\r\n    const setPerformed = (id: number) => {\r\n        dispatch(setPerformedActionCreator(id))\r\n    };\r\n\r\n    const saveTask = (id: number, text: string) => {\r\n        dispatch(saveTaskActionCreator(id, text))\r\n    };\r\n\r\n    return <Main\r\n        setInputText={setInputText}\r\n        inputValue={inputValue}\r\n        addTask={addTask}\r\n        tasks={tasks}\r\n        deleteTasks={deleteTasks}\r\n        setPerformed={setPerformed}\r\n        saveTask={saveTask}\r\n    />\r\n};","import {ITask} from \"../store/types\";\r\n\r\nexport const setToLocalStorage = (tasks: Array<ITask>) => {\r\n        localStorage.setItem('tasks', JSON.stringify(tasks));\r\n};\r\n\r\nexport const getFromLocalStorage = (): Array<ITask> => {\r\n    return JSON.parse(localStorage.getItem('tasks') as string);\r\n};\r\n","import {ADD_TASK, DELETE_TASK, SAVE_TASK, SET_INPUT_TEXT, SET_PERFORMED, SET_TASKS} from \"./constants\";\r\nimport {ITask} from \"./types\";\r\n\r\ninterface IAddTaskAction { type: typeof ADD_TASK, id: number, text: string }\r\nexport const addTaskActionCreator = (id: number, text: string): IAddTaskAction => ({type: ADD_TASK, id, text});\r\n\r\ninterface ISetInputTextAction { type: typeof SET_INPUT_TEXT, newText: string }\r\nexport const setInputTextActionCreator = (newText: string): ISetInputTextAction => ({type: SET_INPUT_TEXT, newText});\r\n\r\ninterface IDeleteTaskAction {type: typeof DELETE_TASK, id: number}\r\nexport const deleteTaskActionCreator = (id: number): IDeleteTaskAction => ({type: DELETE_TASK, id});\r\n\r\ninterface ISetPerformedAction {type: typeof SET_PERFORMED, id: number}\r\nexport const setPerformedActionCreator = (id: number): ISetPerformedAction => ({type: SET_PERFORMED, id});\r\n\r\ninterface ISaveTaskAction {type: typeof SAVE_TASK, id: number, text: string}\r\nexport const saveTaskActionCreator = (id: number, text: string): ISaveTaskAction => ({type: SAVE_TASK, id, text});\r\n\r\ninterface ISetTasksAction {type: typeof SET_TASKS, tasks: Array<ITask>}\r\nexport const setTasksActionCreator = (tasks: Array<ITask>): ISetTasksAction => ({type: SET_TASKS, tasks});\r\n\r\nexport type ActionType = IAddTaskAction | ISetInputTextAction | IDeleteTaskAction |\r\n    ISetPerformedAction | ISaveTaskAction | ISetTasksAction;\r\n\r\n","import React from 'react';\nimport styles from './App.module.scss';\nimport {ThemeProvider} from '@material-ui/styles';\nimport {theme} from \"./theme\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\nimport {MainContainer} from \"./components/Main/MainContainer\";\nimport {Box} from \"@material-ui/core\";\n\nconst App = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <Provider store={store}>\n                <Box className={styles.app}>\n                    <MainContainer/>\n                </Box>\n            </Provider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport 'typeface-roboto';\n\nReactDOM.render(\n    <React.StrictMode>\n        <CssBaseline />\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rootBox\":\"TaskInput_rootBox__14zJp\",\"paper\":\"TaskInput_paper__2dpzd\",\"inputBase\":\"TaskInput_inputBase__YG2NP\",\"iconButton\":\"TaskInput_iconButton__4aLSj\",\"divider\":\"TaskInput_divider__1kvkr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rootBox\":\"Add_rootBox__3avWs\",\"textFieldBox\":\"Add_textFieldBox__qJiVz\",\"btn\":\"Add_btn__2fwjX\"};"],"sourceRoot":""}