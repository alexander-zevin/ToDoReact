{"version":3,"sources":["components/Main/Add/Add.tsx","components/Main/Add/AddContainer.tsx","store/actions.ts","store/constants.ts","components/Main/List/RowEdit/RowEdit.tsx","components/Main/List/RowEdit/RowEditContainer.tsx","components/Main/List/Row/Row.tsx","components/Main/List/Row/RowContainer.tsx","components/Main/List/List.tsx","components/Main/List/ListContainer.tsx","components/Main/Message/Message.tsx","components/Main/Paginator/Paginator.tsx","components/Main/Control/Control.tsx","components/Main/Main.tsx","components/Main/MainContainer.tsx","api/localStorageAPI.ts","App.tsx","serviceWorker.ts","theme.ts","store/reducer.ts","store/store.ts","index.tsx","components/Main/List/Row/Row.module.css","components/Main/Add/Add.module.css","components/Main/List/List.module.css","components/Main/Main.module.css","components/Main/List/RowEdit/RowEdit.module.css","components/Main/Paginator/Paginator.module.css","components/Main/Control/Control.module.css"],"names":["Add","textFieldValue","textFieldChange","addTask","Box","className","styles","TextField","label","fullWidth","size","value","onChange","event","target","variant","onKeyUp","keyCode","ml","Button","btn","onClick","color","AddContainer","tasks","dispatch","useDispatch","useState","setTextFieldValue","text","k","newId","newDate","Date","toISOString","Math","floor","random","length","i","id","date","type","addTaskActionCreator","RowEdit","props","Item","flexGrow","pl","InputBase","placeholder","autoFocus","inputValue","e","setInputValue","saveTask","Tooltip","title","placement","IconButton","Divider","orientation","flexItem","setEditModeIndex","RowEditContainer","saveTaskActionCreator","setOpenMessage","open","message","Row","onMouseMove","setActiveRowIndex","onMouseLeave","isPerformed","Checkbox","checked","setPerformed","isTagged","star","setTag","component","style","textDecoration","textOverflow","overflow","activeRowIndex","deleteTasks","mx","RowContainer","setPerformedActionCreator","deleteTaskActionCreator","setTagActionCreator","List","empty","slice","leftPortionPageNumber","rightPortionPageNumber","map","item","editModeIndex","convertDate","key","ListContainer","pageNumber","pageSize","sortBy","sort","a","b","getDate","getMonth","TransitionRight","Slide","direction","Message","Snackbar","openMessage","onClose","autoHideDuration","anchorOrigin","vertical","horizontal","TransitionComponent","Alert","severity","Paginator","pagesCount","ceil","Pagination","count","paginatorChange","Control","options","React","anchorEl","setAnchorEl","selectedIndex","setSelectedIndex","currentTarget","startIcon","Typography","Menu","keepMounted","Boolean","option","index","MenuItem","selected","handleMenuItemClick","Main","Paper","elevation","state","MainContainer","useSelector","toDo","shallowEqual","useEffect","stateLocalStorage","JSON","parse","localStorage","getItem","setStateActionCreator","setItem","stringify","setToLocalStorage","setPageNumber","App","window","location","hostname","match","theme","createMuiTheme","palette","primary","main","indigo","success","initialState","rootReducer","combineReducers","action","filter","store","createStore","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.d4bb73e8.chunk.js","sourcesContent":["import React, {FC} from 'react';\r\nimport {TextField, Button, Box} from \"@material-ui/core\";\r\nimport {IAddProps} from \"./AddTypes\";\r\nimport styles from './Add.module.css'\r\n\r\nconst Add: FC<IAddProps> = ({textFieldValue, textFieldChange, addTask}) => {\r\n\r\n    return (\r\n        <Box className={styles.Add}>\r\n            <TextField\r\n                label='Add task text'\r\n                fullWidth\r\n                size='small'\r\n                value={textFieldValue}\r\n                onChange={(event) => {textFieldChange(event.target.value)}}\r\n                variant=\"outlined\"\r\n                onKeyUp={event=> {event.keyCode === 13 && addTask(textFieldValue)}}\r\n            />\r\n            <Box ml={2}>\r\n                <Button\r\n                    className={styles.btn}\r\n                    onClick={() => {addTask(textFieldValue)}}\r\n                    variant=\"contained\"\r\n                    color=\"primary\">ADD\r\n                </Button>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Add;","import React, {FC, useState} from 'react';\r\nimport Add from \"./Add\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {IAddContainerProps, IAddTasks, ITextFieldChange} from \"./AddTypes\";\r\nimport {addTaskActionCreator} from \"../../../store/actions\";\r\n\r\nconst AddContainer: FC<IAddContainerProps> = ({tasks}) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [textFieldValue, setTextFieldValue] = useState<string>('');\r\n\r\n    const textFieldChange: ITextFieldChange = value => {\r\n        setTextFieldValue(value)\r\n    };\r\n\r\n    const addTask: IAddTasks = text => {\r\n        if (text !== '') {\r\n\r\n            const newDate = new Date().toISOString();\r\n\r\n            let k, newId;\r\n            do {\r\n                k = 0;\r\n                newId = Math.floor(Math.random() * Math.floor(tasks.length + 1));\r\n                for (let i = 0; i < tasks.length; i++) {\r\n                    if (tasks[i].id === newId) k++\r\n                }\r\n            } while (k !== 0);\r\n            dispatch(addTaskActionCreator(newId, text, newDate));\r\n            textFieldChange('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Add\r\n            textFieldValue={textFieldValue}\r\n            textFieldChange={textFieldChange}\r\n            addTask={addTask}\r\n        />\r\n    )\r\n};\r\n\r\nexport default AddContainer;","import {ADD_TASK, DELETE_TASK, SAVE_TASK, SET_PERFORMED, SET_SORT, SET_STATE, SET_TAG} from \"./constants\";\r\nimport {IState} from \"./types\";\r\n\r\ninterface IAddTaskAction { type: typeof ADD_TASK, id: number, text: string, date: string}\r\nexport const addTaskActionCreator = (id: number, text: string, date: string): IAddTaskAction => ({type: ADD_TASK, id, text, date});\r\n\r\ninterface IDeleteTaskAction {type: typeof DELETE_TASK, id: number}\r\nexport const deleteTaskActionCreator = (id: number): IDeleteTaskAction => ({type: DELETE_TASK, id});\r\n\r\ninterface ISetPerformedAction {type: typeof SET_PERFORMED, id: number}\r\nexport const setPerformedActionCreator = (id: number): ISetPerformedAction => ({type: SET_PERFORMED, id});\r\n\r\ninterface ISaveTaskAction {type: typeof SAVE_TASK, id: number, text: string}\r\nexport const saveTaskActionCreator = (id: number, text: string): ISaveTaskAction => ({type: SAVE_TASK, id, text});\r\n\r\ninterface ISetStateAction {type: typeof SET_STATE, state: IState}\r\nexport const setStateActionCreator = (state: IState): ISetStateAction => ({type: SET_STATE, state});\r\n\r\ninterface ISetTagAction {type: typeof SET_TAG, id: number}\r\nexport const setTagActionCreator = (id: number): ISetTagAction => ({type: SET_TAG, id});\r\n\r\ninterface ISetSortAction {type: typeof SET_SORT, option: string}\r\nexport const setSortActionCreator = (option: string): ISetSortAction => ({type: SET_SORT, option});\r\n\r\nexport type ActionType = IAddTaskAction | IDeleteTaskAction | ISetPerformedAction | ISaveTaskAction | ISetStateAction\r\n    | ISetTagAction | ISetSortAction;\r\n\r\n","export const ADD_TASK = 'ADD_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const SET_PERFORMED = 'SET_PERFORMED';\r\nexport const SAVE_TASK = 'SAVE_TASK';\r\nexport const SET_STATE = 'SET_STATE';\r\nexport const SET_TAG = 'SET_TAG';\r\nexport const SET_SORT = 'SET_SORT';\r\n","import React, {FC} from 'react';\r\nimport styles from './RowEdit.module.css';\r\nimport {Box, IconButton, Divider, Tooltip, InputBase} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {IRowEditProps} from \"./RowEditTypes\";\r\n\r\nconst RowEdit: FC<IRowEditProps> = props => {\r\n    return (\r\n        <Box className={styles.Item}>\r\n            <Box flexGrow={1} pl={2}>\r\n                <InputBase\r\n                    placeholder='Change the task text'\r\n                    autoFocus\r\n                    value={props.inputValue}\r\n                    onChange={e => {props.setInputValue(e.target.value)}}\r\n                    onKeyUp={event => {event.keyCode === 13 && props.saveTask(props.id, props.inputValue)}}\r\n                    fullWidth\r\n                />\r\n            </Box>\r\n            <Tooltip title=\"Save\" placement=\"top\">\r\n                <IconButton onClick={() => {props.saveTask(props.id, props.inputValue)}}>\r\n                    <SaveIcon />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Divider orientation=\"vertical\" flexItem/>\r\n            <Tooltip title=\"Cancel\" placement=\"top\">\r\n                <IconButton onClick={() => {props.setEditModeIndex(null)}}>\r\n                    <CancelIcon />\r\n                </IconButton>\r\n            </Tooltip>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default RowEdit;","import React, {FC, useState} from 'react';\r\nimport {IRowEditContainerProps, ISaveTask} from \"./RowEditTypes\";\r\nimport RowEdit from \"./RowEdit\";\r\nimport {saveTaskActionCreator} from \"../../../../store/actions\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst RowEditContainer: FC<IRowEditContainerProps> = props => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [inputValue, setInputValue] = useState<string>(props.text);\r\n\r\n    const saveTask: ISaveTask = (id, text) => {\r\n        dispatch(saveTaskActionCreator(id, text));\r\n        props.setEditModeIndex(null);\r\n        props.setOpenMessage({open: true, message: 'Saving was successful!'});\r\n    };\r\n\r\n    return (\r\n        <RowEdit\r\n            inputValue={inputValue}\r\n            setInputValue={setInputValue}\r\n            saveTask={saveTask}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\nexport default RowEditContainer;","import React, {FC} from 'react';\r\nimport styles from './Row.module.css';\r\nimport {Box, Checkbox, IconButton, Divider, Tooltip} from \"@material-ui/core\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {IRowProps} from \"./RowTypes\";\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\n\r\nconst Row: FC<IRowProps> = props => {\r\n    return (\r\n        <div\r\n            className={styles.Item}\r\n            onMouseMove={() => {props.setActiveRowIndex(props.id)}}\r\n            onMouseLeave={() => {props.setActiveRowIndex(null)}}\r\n            title={props.text}\r\n        >\r\n            <Tooltip title={props.isPerformed ? 'Performed' : 'Not performed'} placement=\"top\">\r\n                <Checkbox color='primary' checked={props.isPerformed} onChange={() => {props.setPerformed(props.id)}}/>\r\n            </Tooltip>\r\n            <Tooltip title={props.isTagged ? 'Tagged' : 'Not tagged'} placement=\"top\" className={styles.star}>\r\n                <IconButton onClick={() => {props.setTag(props.id)}}>\r\n                    {props.isTagged\r\n                        ? <StarIcon color=\"primary\"/>\r\n                        : <StarBorderIcon/>\r\n                    }\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Box\r\n                className={styles.text}\r\n                component='div'\r\n                flexGrow={1}\r\n                style={{textDecoration: props.isPerformed ? 'line-through' : 'none'}}\r\n                textOverflow=\"ellipsis\"\r\n                overflow=\"hidden\"\r\n            >\r\n                {props.text}\r\n            </Box>\r\n            {props.activeRowIndex === props.id ?\r\n                <>\r\n                    <Tooltip title=\"Edit\" placement=\"top\">\r\n                        <IconButton onClick={() => {props.setEditModeIndex(props.id)}}>\r\n                            <EditIcon/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Divider orientation=\"vertical\" flexItem/>\r\n                    <Tooltip title=\"Delete\" placement=\"top\">\r\n                        <IconButton onClick={() => {props.deleteTasks(props.id)}}>\r\n                            <DeleteIcon/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </>\r\n                :\r\n                <Box mx={1}>{props.date}</Box>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Row;","import React, {FC} from 'react';\r\nimport {IDeleteTasks, IRowContainerProps, ISetPerformed, ISetTag} from \"./RowTypes\";\r\nimport Row from \"./Row\";\r\nimport {deleteTaskActionCreator, setPerformedActionCreator, setTagActionCreator} from \"../../../../store/actions\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst RowContainer: FC<IRowContainerProps> = props => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const setPerformed: ISetPerformed = id => {\r\n        dispatch(setPerformedActionCreator(id))\r\n    };\r\n\r\n    const deleteTasks: IDeleteTasks = id => {\r\n        dispatch(deleteTaskActionCreator(id));\r\n        props.setOpenMessage({open: true, message: 'Uninstall was successful'});\r\n    };\r\n\r\n    const setTag: ISetTag = id => {\r\n        dispatch(setTagActionCreator(id));\r\n    };\r\n\r\n    return (\r\n        <Row\r\n            setPerformed={setPerformed}\r\n            deleteTasks={deleteTasks}\r\n            setTag={setTag}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\nexport default RowContainer;","import React, {FC} from 'react';\r\nimport {Box} from \"@material-ui/core\";\r\nimport {IListProps} from \"./ListTypes\";\r\nimport styles from './List.module.css'\r\nimport RowEditContainer from \"./RowEdit/RowEditContainer\";\r\nimport RowContainer from \"./Row/RowContainer\";\r\n\r\nconst List: FC<IListProps> = props => {\r\n    return (\r\n        <Box className={styles.List}>\r\n            {props.tasks.length === 0 &&\r\n                <Box className={styles.empty}><span>It's empty here...</span></Box>\r\n            }\r\n            {props.tasks.slice(props.leftPortionPageNumber, props.rightPortionPageNumber).map(item =>\r\n                props.editModeIndex !== item.id ?\r\n                    <RowContainer\r\n                        id={item.id}\r\n                        text={item.text}\r\n                        isPerformed={item.isPerformed}\r\n                        editModeIndex={props.editModeIndex}\r\n                        setEditModeIndex={props.setEditModeIndex}\r\n                        activeRowIndex={props.activeRowIndex}\r\n                        setActiveRowIndex={props.setActiveRowIndex}\r\n                        setOpenMessage={props.setOpenMessage}\r\n                        isTagged={item.isTagged}\r\n                        date={props.convertDate(item.date)}\r\n                        key={item.id}\r\n                    />\r\n                    :\r\n                    <RowEditContainer\r\n                        id={item.id}\r\n                        text={item.text}\r\n                        setEditModeIndex={props.setEditModeIndex}\r\n                        setOpenMessage={props.setOpenMessage}\r\n                        key={item.id}\r\n                    />\r\n            )}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default List;","import React, {FC, useState} from 'react';\r\nimport List from \"./List\";\r\nimport {IListContainerProps} from \"./ListTypes\";\r\n\r\nconst ListContainer: FC<IListContainerProps> = props => {\r\n\r\n    const [editModeIndex, setEditModeIndex] = useState<number | null>(null);\r\n\r\n    const [activeRowIndex, setActiveRowIndex] = useState<number | null>(null);\r\n\r\n    const leftPortionPageNumber = (props.pageNumber - 1) * props.pageSize;\r\n    const rightPortionPageNumber = props.pageNumber * props.pageSize;\r\n\r\n    const convertDate = (date: string) => {\r\n        const months = [\"Jan.\",\"Feb.\",\"Mar.\",\"Apr.\",\"May\",\"June\",\"July\",\"Aug.\",\"Sept.\",\"Oct.\",\"Nov.\",\"Dec.\"];\r\n        return `${ new Date(date).getDate()} ${ months[new Date(date).getMonth()]}`\r\n    };\r\n\r\n    if (props.sortBy === 'added') {\r\n        props.tasks.sort((a, b) => {\r\n                if (new Date(a.date) > new Date(b.date)) return 1;\r\n                if (new Date(a.date) < new Date(b.date)) return -1;\r\n                return 0\r\n        })\r\n    } else if (props.sortBy === 'not performed') {\r\n        props.tasks.sort((a, b) => {\r\n                if (a.isPerformed > b.isPerformed) return 1;\r\n                if (a.isPerformed < b.isPerformed) return -1;\r\n                return 0\r\n        });\r\n    } else if (props.sortBy === 'tags') {\r\n        props.tasks.sort((a, b) => {\r\n                if (a.isTagged < b.isTagged) return 1;\r\n                if (a.isTagged > b.isTagged) return -1;\r\n                return 0\r\n        })\r\n    }\r\n\r\n    return (\r\n        <List\r\n            tasks={props.tasks}\r\n            editModeIndex={editModeIndex}\r\n            setEditModeIndex={setEditModeIndex}\r\n            activeRowIndex={activeRowIndex}\r\n            setActiveRowIndex={setActiveRowIndex}\r\n            setOpenMessage={props.setOpenMessage}\r\n            pageNumber={props.pageNumber}\r\n            pageSize={props.pageSize}\r\n            leftPortionPageNumber={leftPortionPageNumber}\r\n            rightPortionPageNumber={rightPortionPageNumber}\r\n            sortBy={props.sortBy}\r\n            convertDate={convertDate}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ListContainer;","import React, {FC} from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport {IMessageProps} from \"./MessageTypes\";\r\nimport {Slide, SlideProps} from \"@material-ui/core\";\r\n\r\ntype TransitionProps = Omit<SlideProps, 'direction'>;\r\n\r\nfunction TransitionRight(props: TransitionProps) {\r\n    return <Slide {...props} direction=\"right\" />;\r\n}\r\n\r\nconst Message: FC<IMessageProps> = props => {\r\n    return (\r\n        <Snackbar\r\n            open={props.openMessage.open}\r\n            onClose={() => {props.setOpenMessage({open: false, message: null})}}\r\n            autoHideDuration={3000}\r\n            anchorOrigin={{vertical: 'bottom', horizontal: 'left'}}\r\n            TransitionComponent={TransitionRight}\r\n        >\r\n            <Alert\r\n                onClose={() => {props.setOpenMessage({open: false, message: null})}}\r\n                severity=\"success\"\r\n                variant=\"filled\"\r\n            >\r\n                {props.openMessage.message}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n};\r\n\r\nexport default Message;","import React, {FC} from 'react';\r\nimport {Pagination} from \"@material-ui/lab\";\r\nimport {IPaginatorProps} from \"./PaginatorTypes\";\r\nimport {Box} from \"@material-ui/core\";\r\nimport styles from './Paginator.module.css';\r\n\r\nconst Paginator: FC<IPaginatorProps> = props => {\r\n\r\n    const pagesCount = Math.ceil(props.tasks.length / props.pageSize);\r\n\r\n    return (\r\n        <Box className={styles.Paginator}>\r\n            <Pagination count={pagesCount} onChange={props.paginatorChange} color=\"primary\"/>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Paginator;","import React, {FC} from 'react';\r\nimport {Box} from \"@material-ui/core\";\r\nimport SortIcon from '@material-ui/icons/Sort';\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport styles from './Control.module.css'\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setSortActionCreator} from \"../../../store/actions\";\r\nimport {IControlProps} from \"./ControlTypes\";\r\n\r\nconst Control: FC<IControlProps> = props => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const options = [\r\n        'added',\r\n        'not performed',\r\n        'tags',\r\n    ];\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n    const [selectedIndex, setSelectedIndex] = React.useState<number>(0);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMenuItemClick = (event: React.MouseEvent<HTMLElement>, index: number) => {\r\n        setSelectedIndex(index);\r\n        setAnchorEl(null);\r\n        dispatch(setSortActionCreator(options[index]));\r\n\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <Box>\r\n            <Box className={styles.sortBy}>\r\n                <Button onClick={handleClick} startIcon={<SortIcon/>}>\r\n                    <Typography variant=\"body2\">\r\n                        Sort by: {props.sortBy}\r\n                    </Typography>\r\n                </Button>\r\n                <Menu\r\n                    anchorEl={anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={handleClose}\r\n                >\r\n                    {options.map((option, index) =>\r\n                        <MenuItem\r\n                            key={option}\r\n                            selected={index === selectedIndex}\r\n                            onClick={(event) => handleMenuItemClick(event, index)}\r\n                        >\r\n                            {option}\r\n                        </MenuItem>\r\n                    )}\r\n                </Menu>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Control;","import React, {FC} from 'react';\r\nimport styles from './Main.module.css';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AddContainer from \"./Add/AddContainer\";\r\nimport ListContainer from \"./List/ListContainer\";\r\nimport Message from \"./Message/Message\";\r\nimport {IMainProps} from \"./MainTypes\";\r\nimport Paginator from \"./Paginator/Paginator\";\r\nimport Control from \"./Control/Control\";\r\n\r\nconst Main: FC<IMainProps> = props => {\r\n    return (\r\n        <Paper className={styles.Paper} elevation={3}>\r\n            <AddContainer tasks={props.state.tasks}/>\r\n            <Control sortBy={props.state.sortBy}/>\r\n            <ListContainer\r\n                setOpenMessage={props.setOpenMessage}\r\n                tasks={props.state.tasks}\r\n                pageNumber={props.pageNumber}\r\n                pageSize={props.pageSize}\r\n                sortBy={props.state.sortBy}\r\n            />\r\n            <Message\r\n                openMessage={props.openMessage}\r\n                setOpenMessage={props.setOpenMessage}\r\n            />\r\n            <Paginator\r\n                tasks={props.state.tasks}\r\n                paginatorChange={props.paginatorChange}\r\n                pageSize={props.pageSize}\r\n            />\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default Main;","import React, {useEffect, useState} from 'react';\r\nimport {IMessage, IPaginatorChange} from \"./MainTypes\";\r\nimport {shallowEqual, useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../store/store\";\r\nimport Main from \"./Main\";\r\nimport {getFromLocalStorage, setToLocalStorage} from \"../../api/localStorageAPI\";\r\nimport {setStateActionCreator} from \"../../store/actions\";\r\n\r\nconst MainContainer = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // const {tasks, sortBy} = useSelector((state: RootStateType) => state.toDo, shallowEqual);\r\n    const state = useSelector((state: RootStateType) => state.toDo, shallowEqual);\r\n\r\n    useEffect(() => {\r\n        const stateLocalStorage = getFromLocalStorage();\r\n        if (stateLocalStorage !== null) dispatch(setStateActionCreator(stateLocalStorage));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        setToLocalStorage(state);\r\n    }, [state]);\r\n\r\n    const [openMessage, setOpenMessage] = useState<IMessage>({open: false, message: null});\r\n\r\n    const pageSize = 11;\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const paginatorChange: IPaginatorChange = (event, value) => {\r\n        setPageNumber(value);\r\n    };\r\n\r\n    return (\r\n        <Main\r\n            // tasks={tasks}\r\n            openMessage={openMessage}\r\n            setOpenMessage={setOpenMessage}\r\n            pageSize={pageSize}\r\n            pageNumber={pageNumber}\r\n            paginatorChange={paginatorChange}\r\n            // sortBy={sortBy}\r\n            state={state}\r\n        />\r\n    );\r\n};\r\n\r\nexport default MainContainer;","import {IState, ITask} from \"../store/types\";\r\n\r\nexport const setToLocalStorage = (state: IState) => {\r\n        localStorage.setItem('tasks', JSON.stringify(state));\r\n};\r\n\r\nexport const getFromLocalStorage = (): IState => {\r\n    return JSON.parse(localStorage.getItem('tasks') as string);\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport MainContainer from \"./components/Main/MainContainer\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <MainContainer/>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createMuiTheme} from \"@material-ui/core\";\r\nimport {indigo} from \"@material-ui/core/colors\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: indigo[400]\r\n        },\r\n        success: {\r\n            main: indigo[400]\r\n        }\r\n    }\r\n});\r\n\r\nexport default theme","import {ADD_TASK, DELETE_TASK, SAVE_TASK, SET_PERFORMED, SET_SORT, SET_TAG, SET_STATE} from \"./constants\";\r\nimport {IState} from './types'\r\nimport {ActionType} from \"./actions\";\r\n\r\nconst initialState: IState = {\r\n    tasks: [],\r\n    sortBy: 'added'\r\n};\r\n\r\nexport const reducer = (state = initialState, action: ActionType): IState => {\r\n    switch (action.type) {\r\n        case ADD_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, {id: action.id, text: action.text, isPerformed: false, isTagged: false, date: action.date}]\r\n            }\r\n        }\r\n        case DELETE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(i => i.id !== action.id)\r\n            }\r\n        }\r\n        case SET_PERFORMED: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(i => {\r\n                    if (i.id === action.id) {\r\n                        return {...i, isPerformed: !i.isPerformed}\r\n                    } else {\r\n                        return {...i}\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case SAVE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(i =>\r\n                    i.id === action.id\r\n                        ? {...i, text: action.text}\r\n                        : {...i}\r\n                )\r\n            }\r\n        }\r\n        case SET_STATE: {\r\n            return action.state\r\n        }\r\n        case SET_TAG: {\r\n            return {\r\n                ...state, tasks: state.tasks.map(i =>\r\n                    i.id === action.id\r\n                        ? {...i, isTagged: !i.isTagged}\r\n                        : {...i}\r\n                )\r\n            }\r\n        }\r\n        case SET_SORT: {\r\n            return {\r\n                ...state, sortBy: action.option\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n};","import {createStore, combineReducers} from 'redux';\r\nimport {reducer} from \"./reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    toDo: reducer\r\n});\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer> //ReturnType cоздаёт тип, состоящий из возвращаемого типа функции RootReducer\r\n\r\nexport const store = createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from \"./theme\";\nimport {Provider as StoreProvider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <StoreProvider store={store}>\n            <ThemeProvider theme={theme}>\n                <App/>\n            </ThemeProvider>\n        </StoreProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Item\":\"Row_Item__2xJ0Q\",\"Divider\":\"Row_Divider__X6JUM\",\"star\":\"Row_star__PxzG7\",\"text\":\"Row_text__2lf9X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Add\":\"Add_Add__fr6Ar\",\"btn\":\"Add_btn__a0WMD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"List_List__2bHYY\",\"empty\":\"List_empty__3gKid\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Paper\":\"Main_Paper__1D9LB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Item\":\"RowEdit_Item__1b8hj\",\"Divider\":\"RowEdit_Divider__14jz7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Paginator\":\"Paginator_Paginator__33pke\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sortBy\":\"Control_sortBy__12syJ\"};"],"sourceRoot":""}